'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm, Controller, SubmitHandler } from 'react-hook-form';
import { z } from 'zod';
import { motion, AnimatePresence } from 'framer-motion';

// --- Shadcn UI Components ---
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import {
  TooltipProvider,
} from '@/components/ui/tooltip';
import { Separator } from '@/components/ui/separator';

// --- Icons (lucide-react) ---
import { Camera, Info, Check, X, DollarSign, Percent, PlusCircle, CalendarDays, Building, Settings, Package, MapPin } from 'lucide-react';

// --- Zod Schema Definition ---
// Assuming these enums are defined globally or imported
// For this example, let's define them here based on your initial file and schema
const MeasurementUnit = {
  CUBIC_METER: 'CUBIC_METER',
  CUBIC_FEET: 'CUBIC_FEET',
  SQUARE_METER: 'SQUARE_METER',
  SQUARE_FEET: 'SQUARE_FEET',
  METER: 'METER',
  FEET: 'FEET',
  COUNT: 'COUNT',
  WEIGHT_KG: 'WEIGHT_KG',
  WEIGHT_LB: 'WEIGHT_LB',
} as const; // Make it a const assertion for stricter typing

const InventoryPolicy = {
  FIFO: 'FIFO',
  LIFO: 'LIFO',
  FEFO: 'FEFO',
  NONE: 'NONE', // Added NONE as it was in original mock, adjust if not needed
} as const;

const MeasurementUnitEnum = z.enum([
  MeasurementUnit.CUBIC_METER,
  MeasurementUnit.CUBIC_FEET,
  MeasurementUnit.SQUARE_METER,
  MeasurementUnit.SQUARE_FEET,
  MeasurementUnit.METER,
  MeasurementUnit.FEET,
  MeasurementUnit.COUNT,
  MeasurementUnit.WEIGHT_KG,
  MeasurementUnit.WEIGHT_LB,
]);

const InventoryPolicyEnum = z.enum([
  InventoryPolicy.FIFO,
  InventoryPolicy.LIFO,
  InventoryPolicy.FEFO,
  // InventoryPolicy.NONE, // Uncomment if NONE is a valid policy in your schema
]);

export const CreateOrganizationInputSchema = z.object({
  name: z.string().min(1, 'Organization name is required.'),
  slug: z
    .string()
    .min(2, 'Slug must be at least 2 characters.')
    .max(30, 'Slug must not exceed 30 characters.')
    .regex(/^[a-z0-9-]+$/, 'Slug can only contain lowercase letters, numbers, and hyphens.'),
  description: z.string().max(500, 'Description must not exceed 500 characters.').optional().nullable(),
  logo: z.string().url('Invalid logo URL.').optional().nullable(),

  // Expense Settings
  expenseApprovalRequired: z.boolean().default(false),
  expenseApprovalThreshold: z.number().min(0, 'Threshold must be a positive number.').optional().nullable(),
  expenseReceiptRequired: z.boolean().default(true),
  expenseReceiptThreshold: z.number().min(0, 'Threshold must be a positive number.').optional().nullable(),
  expenseTagOptions: z.array(z.string()).default([]),

  // General Settings
  defaultCurrency: z.string().min(3).max(3).optional().default('USD'),
  defaultTimezone: z.string().optional().default('UTC'),
  defaultTaxRate: z.number().min(0, 'Tax rate must be between 0 and 1 (e.g., 0.1 for 10%).').max(1).optional().nullable(),

  // Inventory Settings
  inventoryPolicy: InventoryPolicyEnum.optional().default(InventoryPolicy.FEFO),
  lowStockThreshold: z.number().int().min(0, 'Threshold must be a non-negative integer.').optional().default(10),
  negativeStock: z.boolean().optional().default(false),

  // Spatial Settings
  enableCapacityTracking: z.boolean().optional().default(false),
  enforceSpatialConstraints: z.boolean().optional().default(false),
  enableProductDimensions: z.boolean().optional().default(false),
  defaultMeasurementUnit: MeasurementUnitEnum.optional().nullable().default(MeasurementUnit.METER),
  defaultDimensionUnit: MeasurementUnitEnum.optional().nullable().default(MeasurementUnit.METER), // Assuming METER and FEET are options
  defaultWeightUnit: MeasurementUnitEnum.optional().nullable().default(MeasurementUnit.WEIGHT_KG), // Assuming WEIGHT_KG and WEIGHT_LB are options
});

export type CreateOrganizationInput = z.infer<typeof CreateOrganizationInputSchema>;

// --- Helper Data (Example timezones and currencies) ---
const timezones = [
  'UTC', 'America/New_York', 'America/Los_Angeles', 'Europe/London', 'Asia/Tokyo', 'Australia/Sydney',
  // Add more as needed
];
const currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY'];

// --- Framer Motion Variants ---
const sectionVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  exit: { opacity: 0, y: -20, transition: { duration: 0.3 } },
};

const CreateOrganizationPage = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [logoPreview, setLogoPreview] = useState<string | null>(null);
  const [newTag, setNewTag] = useState('');

  const {
    control,
    handleSubmit,
    formState: { errors, isValid, touchedFields },
    watch,
    setValue,
    reset,
    trigger, // To manually trigger validation for steps
  } = useForm({
    resolver: zodResolver(CreateOrganizationInputSchema),
    mode: 'onChange', // Validate on change for real-time feedback
  });

  const formData = watch(); // Watch all form data for the summary panel

  const handleLogoChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        const result = reader.result as string;
        setLogoPreview(result);
        setValue('logo', result, { shouldValidate: true, shouldDirty: true }); // Assuming storing as base64 or blob URL
      };
      reader.readAsDataURL(file);
    } else {
      setLogoPreview(null);
      setValue('logo', null, { shouldValidate: true, shouldDirty: true });
    }
  };

  const handleAddTag = () => {
    if (newTag.trim() && !formData?.expenseTagOptions?.includes(newTag.trim())) {
      setValue('expenseTagOptions', [...formData?.expenseTagOptions, newTag.trim()], { shouldValidate: true, shouldDirty: true });
      setNewTag('');
    }
  };

  const handleRemoveTag = (tagToRemove: string) => {
    setValue(
      'expenseTagOptions',
      formData.expenseTagOptions?.filter(tag => tag !== tagToRemove),
      { shouldValidate: true, shouldDirty: true }
    );
  };

  const formatSlug = (text: string): string => {
    return text
      .toLowerCase()
      .replace(/\s+/g, '-') // Replace spaces with hyphens
      .replace(/[^a-z0-9-]/g, '') // Remove invalid characters
      .slice(0, 30); // Ensure max length
  };

  // Auto-generate slug from name if slug is not manually edited or empty
  useEffect(() => {
    const nameValue = watch('name');
    const slugValue = watch('slug');
    const isSlugTouched = touchedFields.slug;

    if (nameValue && (!slugValue || (slugValue === formatSlug(nameValue) && !isSlugTouched))) {
       setValue('slug', formatSlug(nameValue), { shouldValidate: true });
    }
  }, [watch('name'), setValue, touchedFields.slug]);


  const onSubmit: SubmitHandler<CreateOrganizationInput> = async data => {
    console.log('Form Data Submitted:', data);
    // Replace with your actual API call
    // await api.createOrganization(data);
    // router.push('/success-page'); // Or wherever you want to redirect
    alert('Organization created successfully! (Check console for data)');
  };

  const steps = [
    { id: 1, name: 'Organization Details', icon: Building, fields: ['name', 'slug', 'description', 'logo'] },
    { id: 2, name: 'Expense Settings', icon: Settings, fields: ['expenseApprovalRequired', 'expenseApprovalThreshold', 'expenseReceiptRequired', 'expenseReceiptThreshold', 'expenseTagOptions'] },
    { id: 3, name: 'General Settings', icon: CalendarDays, fields: ['defaultCurrency', 'defaultTimezone', 'defaultTaxRate'] },
    { id: 4, name: 'Inventory & Spatial', icon: Package, fields: ['inventoryPolicy', 'lowStockThreshold', 'negativeStock', 'enableCapacityTracking', 'enforceSpatialConstraints', 'enableProductDimensions', 'defaultMeasurementUnit', 'defaultDimensionUnit', 'defaultWeightUnit'] },
  ];

  const nextStep = async () => {
    const currentStepFields = steps[currentStep -1].fields as (keyof CreateOrganizationInput)[];
    const isValidStep = await trigger(currentStepFields);

    if (isValidStep && currentStep < steps.length) {
      setCurrentStep(prev => prev + 1);
    } else if (isValidStep && currentStep === steps.length) {
        // If it's the last step and valid, could allow submit from here too
        // or rely on the main submit button
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(prev => prev - 1);
    }
  };
  
  const getStepProgress = (stepIndex: number) => {
    const stepFields = steps[stepIndex].fields as (keyof CreateOrganizationInput)[];
    const totalFields = stepFields.length;
    if (totalFields === 0) return 100; // No fields means step is complete by default
    
    const touchedValidFields = stepFields.filter(field => touchedFields[field] && !errors[field]).length;
    return (touchedValidFields / totalFields) * 100;
  };


  // Framer Motion variants for step transitions
  const stepVariants = {
    enter: (direction: number) => ({
      x: direction > 0 ? '100%' : '-100%',
      opacity: 0,
    }),
    center: {
      x: 0,
      opacity: 1,
      transition: { type: 'spring', stiffness: 300, damping: 30 }
    },
    exit: (direction: number) => ({
      x: direction < 0 ? '100%' : '-100%',
      opacity: 0,
      transition: { type: 'tween', ease: 'anticipate', duration: 0.3 }
    }),
  };
  const [direction, setDirection] = useState(0); // For animation direction

  useEffect(() => {
    // Scroll to top when step changes
    window.scrollTo(0, 0);
  }, [currentStep]);


  return (
    <TooltipProvider>
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-sky-100 py-8 px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="max-w-5xl mx-auto"
        >
          <Card className="shadow-2xl overflow-hidden">
            <CardHeader className="bg-slate-900 text-primary-foreground p-6">
              <motion.div whileHover={{ scale: 1.02 }} className="flex items-center space-x-3">
                <Building className="h-8 w-8" />
                <CardTitle className="text-3xl font-bold">Create New Organization</CardTitle>
              </motion.div>
              <CardDescription className="text-slate-300 mt-1">
                Fill in the details below to set up your new organization.
              </CardDescription>
            </CardHeader>

            <CardContent className="p-0">
              <div className="flex flex-col md:flex-row">
                {/* Sidebar / Progress Indicator */}
                <motion.div
                  initial={{ x: -50, opacity: 0 }}
                  animate={{ x: 0, opacity: 1 }}
                  transition={{ delay: 0.2, duration: 0.5 }}
                  className="w-full md:w-1/4 bg-slate-50 p-6 border-b md:border-r md:border-b-0 border-slate-200"
                >
                  <h3 className="text-lg font-semibold text-slate-700 mb-4">Setup Progress</h3>
                  <nav className="space-y-1">
                    {steps.map((step, index) => (
                      <motion.button
                        key={step.id}
                        onClick={async () => {
                            if (index < currentStep -1) { // Allow navigation to previously completed steps
                                setCurrentStep(step.id);
                            } else { // For current or future steps, validate current before moving
                                const currentStepFieldsToValidate = steps[currentStep -1].fields as (keyof CreateOrganizationInput)[];
                                const isValidCurrentStep = await trigger(currentStepFieldsToValidate);
                                if(isValidCurrentStep && step.id > currentStep) {
                                    setCurrentStep(step.id)
                                } else if (isValidCurrentStep && step.id < currentStep) {
                                   setCurrentStep(step.id)
                                } else if (step.id === currentStep) {
                                   // Already on this step
                                }
                            }
                        }}
                        className={`w-full flex items-center space-x-3 p-3 rounded-lg text-left transition-all duration-200 ease-in-out
                          ${currentStep === step.id ? 'bg-sky-500 text-white shadow-md' : 'hover:bg-slate-200 text-slate-600'}
                          ${index < currentStep -1 && !Object.values(errors).some(Boolean) ? 'border-l-4 border-green-500' : ''}
                          ${index < currentStep -1 && Object.values(errors).some(Boolean) && steps[index].fields.some(f => errors[f as keyof CreateOrganizationInput]) ? 'border-l-4 border-red-500' : ''}
                        `}
                        whileHover={{ x: currentStep === step.id ? 0 : 5 }}
                      >
                        <step.icon className={`h-5 w-5 ${currentStep === step.id ? 'text-white' : 'text-sky-600'}`} />
                        <span className="font-medium text-sm">{step.name}</span>
                        {index < currentStep -1 && !steps[index].fields.some(f => errors[f as keyof CreateOrganizationInput]) && <Check className="h-4 w-4 text-green-500 ml-auto"/>}
                        {index < currentStep -1 && steps[index].fields.some(f => errors[f as keyof CreateOrganizationInput]) && <X className="h-4 w-4 text-red-500 ml-auto"/>}
                      </motion.button>
                    ))}
                  </nav>
                   <div className="mt-6">
                        <Progress value={(currentStep / steps.length) * 100} className="w-full h-2 [&>div]:bg-sky-500" />
                        <p className="text-xs text-slate-500 mt-1 text-center">
                            Step {currentStep} of {steps.length}
                        </p>
                   </div>
                </motion.div>

                {/* Form Content Area */}
                <div className="w-full md:w-3/4 p-6 sm:p-8">
                  <AnimatePresence initial={false} custom={direction} mode="wait">
                    <motion.form
                      key={currentStep}
                      custom={direction}
                      variants={stepVariants}
                      initial="enter"
                      animate="center"
                      exit="exit"
                      onSubmit={handleSubmit(onSubmit)}
                      className="space-y-8"
                    >
                      {/* Step 1: Organization Details */}
                      {currentStep === 1 && (
                        <motion.div variants={sectionVariants} initial="hidden" animate="visible" exit="exit">
                          <h3 className="text-2xl font-semibold text-slate-800 mb-1">Organization Details</h3>
                          <p className="text-sm text-slate-500 mb-6">Set up the basic information for your organization.</p>
                          
                          <div className="space-y-6">
                            <div>
                              <Label htmlFor="logo-upload" className="text-sm font-medium text-slate-700">Organization Logo</Label>
                              <div className="mt-2 flex items-center space-x-4">
                                <Avatar className="h-24 w-24 rounded-lg border border-slate-300 bg-slate-100">
                                  {logoPreview ? <AvatarImage src={logoPreview} alt="Logo Preview" className="object-contain" /> : <AvatarFallback><Camera className="h-8 w-8 text-slate-400" /></AvatarFallback>}
                                </Avatar>
                                <Button type="button" variant="outline" size="sm" asChild>
                                  <label htmlFor="logo-upload" className="cursor-pointer">
                                    {logoPreview ? 'Change' : 'Upload'} Image
                                    <Input id="logo-upload" type="file" accept="image/*" className="sr-only" onChange={handleLogoChange} />
                                  </label>
                                </Button>
                                {logoPreview && <Button type="button" variant="ghost" size="sm" onClick={() => { setLogoPreview(null); setValue('logo', null); }}><X className="h-4 w-4 mr-1"/>Remove</Button>}
                              </div>
                              <p className="mt-1 text-xs text-slate-500">Recommended: Square image (e.g., PNG, JPG) under 2MB.</p>
                              {errors.logo && <p className="mt-1 text-sm text-red-600">{errors.logo.message}</p>}
                            </div>

                            <div>
                              <Label htmlFor="name" className="text-sm font-medium text-slate-700">Organization Name <span className="text-red-500">*</span></Label>
                              <Controller
                                name="name"
                                control={control}
                                render={({ field }) => <Input {...field} id="name" placeholder="e.g., Acme Corp" className={`mt-1 ${errors.name ? 'border-red-500 focus:border-red-500 ring-red-500' : ''}`} />}
                              />
                              <p className="mt-1 text-xs text-slate-500">The official name of your organization.</p>
                              {errors.name && <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>}
                            </div>

                            <div>
                              <Label htmlFor="slug" className="text-sm font-medium text-slate-700">Organization Slug <span className="text-red-500">*</span></Label>
                               <Controller
                                name="slug"
                                control={control}
                                render={({ field }) => (
                                    <div className="mt-1 flex rounded-md shadow-sm">
                                        <span className="inline-flex items-center px-3 rounded-l-md border border-r-0 border-slate-300 bg-slate-100 text-slate-500 text-sm">
                                            your-app.com/org/
                                        </span>
                                        <Input
                                            {...field}
                                            id="slug"
                                            placeholder="e.g., acme-corp"
                                            className={`flex-1 min-w-0 block rounded-none rounded-r-md ${errors.slug ? 'border-red-500 focus:border-red-500 ring-red-500' : ''}`}
                                            onChange={(e) => field.onChange(formatSlug(e.target.value))}
                                        />
                                    </div>
                                )}
                              />
                              <p className="mt-1 text-xs text-slate-500">URL-friendly identifier. Lowercase letters, numbers, and hyphens only.</p>
                              {errors.slug && <p className="mt-1 text-sm text-red-600">{errors.slug.message}</p>}
                            </div>
                            
                            <div>
                              <Label htmlFor="description" className="text-sm font-medium text-slate-700">Description</Label>
                              <Controller
                                name="description"
                                control={control}
                                render={({ field }) => <Textarea {...field} value={field.value ?? ''} id="description" rows={4} placeholder="A brief description of your organization (optional)." className={`mt-1 ${errors.description ? 'border-red-500 focus:border-red-500 ring-red-500' : ''}`} />}
                              />
                              <div className="mt-1 flex justify-between">
                                <p className="text-xs text-slate-500">Max 500 characters.</p>
                                <p className="text-xs text-slate-500">{formData.description?.length || 0}/500</p>
                              </div>
                              {errors.description && <p className="mt-1 text-sm text-red-600">{errors.description.message}</p>}
                            </div>
                          </div>
                        </motion.div>
                      )}

                      {/* Step 2: Expense Settings */}
                      {currentStep === 2 && (
                        <motion.div variants={sectionVariants} initial="hidden" animate="visible" exit="exit">
                          <h3 className="text-2xl font-semibold text-slate-800 mb-1">Expense Settings</h3>
                          <p className="text-sm text-slate-500 mb-6">Configure how expenses are managed.</p>
                          <div className="space-y-6">
                            <Controller
                                name="expenseApprovalRequired"
                                control={control}
                                render={({ field }) => (
                                    <div className="flex items-start space-x-3">
                                        <Checkbox id="expenseApprovalRequired" checked={field.value} onCheckedChange={field.onChange} className="mt-1"/>
                                        <div className="grid gap-1.5 leading-none">
                                            <Label htmlFor="expenseApprovalRequired" className="text-sm font-medium text-slate-700">Require expense approval</Label>
                                            <p className="text-xs text-slate-500">If checked, all expenses will require approval before processing.</p>
                                        </div>
                                    </div>
                                )}
                            />
                            {formData.expenseApprovalRequired && (
                                <motion.div initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: 'auto' }} transition={{duration: 0.3}} className="pl-8 space-y-2">
                                    <Label htmlFor="expenseApprovalThreshold" className="text-sm font-medium text-slate-700">Approval Threshold ({formData.defaultCurrency || 'USD'})</Label>
                                    <Controller
                                        name="expenseApprovalThreshold"
                                        control={control}
                                        render={({ field }) => (
                                            <div className="relative">
                                                <DollarSign className="absolute left-2.5 top-2.5 h-4 w-4 text-slate-400" />
                                                <Input {...field} value={field.value ?? ''} onChange={e => field.onChange(e.target.value === '' ? null : Number(e.target.value))} id="expenseApprovalThreshold" type="number" placeholder="0.00" min="0" step="0.01" className={`pl-8 ${errors.expenseApprovalThreshold ? 'border-red-500' : ''}`} />
                                            </div>
                                        )}
                                    />
                                    <p className="text-xs text-slate-500">Expenses above this amount require approval. Leave blank if all require approval.</p>
                                    {errors.expenseApprovalThreshold && <p className="mt-1 text-sm text-red-600">{errors.expenseApprovalThreshold.message}</p>}
                                </motion.div>
                            )}

                            <Separator />

                            <Controller
                                name="expenseReceiptRequired"
                                control={control}
                                render={({ field }) => (
                                    <div className="flex items-start space-x-3">
                                        <Checkbox id="expenseReceiptRequired" checked={field.value} onCheckedChange={field.onChange} className="mt-1"/>
                                        <div className="grid gap-1.5 leading-none">
                                            <Label htmlFor="expenseReceiptRequired" className="text-sm font-medium text-slate-700">Require receipts for expenses</Label>
                                            <p className="text-xs text-slate-500">If checked, users must attach receipts to expense claims.</p>
                                        </div>
                                    </div>
                                )}
                            />
                             {formData.expenseReceiptRequired && (
                                <motion.div initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: 'auto' }} transition={{duration: 0.3}} className="pl-8 space-y-2">
                                    <Label htmlFor="expenseReceiptThreshold" className="text-sm font-medium text-slate-700">Receipt Threshold ({formData.defaultCurrency || 'USD'})</Label>
                                    <Controller
                                        name="expenseReceiptThreshold"
                                        control={control}
                                        render={({ field }) => (
                                             <div className="relative">
                                                <DollarSign className="absolute left-2.5 top-2.5 h-4 w-4 text-slate-400" />
                                                <Input {...field} value={field.value ?? ''} onChange={e => field.onChange(e.target.value === '' ? null : Number(e.target.value))} id="expenseReceiptThreshold" type="number" placeholder="0.00" min="0" step="0.01" className={`pl-8 ${errors.expenseReceiptThreshold ? 'border-red-500' : ''}`} />
                                            </div>
                                        )}
                                    />
                                    <p className="text-xs text-slate-500">Expenses above this amount require receipts. Leave blank if all require receipts.</p>
                                    {errors.expenseReceiptThreshold && <p className="mt-1 text-sm text-red-600">{errors.expenseReceiptThreshold.message}</p>}
                                </motion.div>
                            )}
                            
                            <Separator />

                            <div>
                                <Label htmlFor="newTag" className="text-sm font-medium text-slate-700">Expense Tags</Label>
                                <p className="text-xs text-slate-500 mb-2">Define tags for categorizing expenses (e.g., Travel, Meals, Software).</p>
                                <div className="flex items-center space-x-2">
                                    <Input 
                                        id="newTag" 
                                        value={newTag} 
                                        onChange={(e) => setNewTag(e.target.value)} 
                                        placeholder="Add a new tag" 
                                        onKeyDown={(e) => { if (e.key === 'Enter') { e.preventDefault(); handleAddTag(); }}}
                                    />
                                    <Button type="button" variant="outline" size="icon" onClick={handleAddTag} aria-label="Add tag">
                                        <PlusCircle className="h-4 w-4" />
                                    </Button>
                                </div>
                                {formData?.expenseTagOptions.length > 0 && (
                                    <div className="mt-3 flex flex-wrap gap-2">
                                        {formData?.expenseTagOptions.map(tag => (
                                            <motion.div key={tag} initial={{opacity:0, scale:0.5}} animate={{opacity:1, scale:1}} exit={{opacity:0, scale:0.5}}>
                                                <Badge variant="secondary" className="group relative pr-7">
                                                    {tag}
                                                    <button
                                                        type="button"
                                                        onClick={() => handleRemoveTag(tag)}
                                                        className="absolute top-1/2 right-1 -translate-y-1/2 opacity-50 group-hover:opacity-100 transition-opacity"
                                                        aria-label={`Remove tag ${tag}`}
                                                    >
                                                        <X className="h-3 w-3" />
                                                    </button>
                                                </Badge>
                                            </motion.div>
                                        ))}
                                    </div>
                                )}
                                {errors.expenseTagOptions && <p className="mt-1 text-sm text-red-600">{typeof errors.expenseTagOptions.message === 'string' ? errors.expenseTagOptions.message : 'Invalid tag options'}</p>}
                            </div>
                          </div>
                        </motion.div>
                      )}
                      
                      {/* Step 3: General Settings */}
                      {currentStep === 3 && (
                        <motion.div variants={sectionVariants} initial="hidden" animate="visible" exit="exit">
                          <h3 className="text-2xl font-semibold text-slate-800 mb-1">General Settings</h3>
                          <p className="text-sm text-slate-500 mb-6">Configure default currency, timezone, and tax rate.</p>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <Label htmlFor="defaultCurrency" className="text-sm font-medium text-slate-700">Default Currency</Label>
                                <Controller
                                    name="defaultCurrency"
                                    control={control}
                                    render={({ field }) => (
                                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                                            <SelectTrigger id="defaultCurrency" className={`mt-1 ${errors.defaultCurrency ? 'border-red-500' : ''}`}>
                                                <SelectValue placeholder="Select currency" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {currencies.map(c => <SelectItem key={c} value={c}>{c}</SelectItem>)}
                                            </SelectContent>
                                        </Select>
                                    )}
                                />
                                <p className="mt-1 text-xs text-slate-500">Primary currency for financial transactions.</p>
                                {errors.defaultCurrency && <p className="mt-1 text-sm text-red-600">{errors.defaultCurrency.message}</p>}
                            </div>

                            <div>
                                <Label htmlFor="defaultTimezone" className="text-sm font-medium text-slate-700">Default Timezone</Label>
                                 <Controller
                                    name="defaultTimezone"
                                    control={control}
                                    render={({ field }) => (
                                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                                            <SelectTrigger id="defaultTimezone" className={`mt-1 ${errors.defaultTimezone ? 'border-red-500' : ''}`}>
                                                <SelectValue placeholder="Select timezone" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {timezones.map(tz => <SelectItem key={tz} value={tz}>{tz.replace('_', ' ')}</SelectItem>)}
                                            </SelectContent>
                                        </Select>
                                    )}
                                />
                                <p className="mt-1 text-xs text-slate-500">Used for scheduling and date-sensitive operations.</p>
                                {errors.defaultTimezone && <p className="mt-1 text-sm text-red-600">{errors.defaultTimezone.message}</p>}
                            </div>

                            <div className="md:col-span-1"> {/* Or md:col-span-2 for full width */}
                                <Label htmlFor="defaultTaxRate" className="text-sm font-medium text-slate-700">Default Tax Rate</Label>
                                <Controller
                                    name="defaultTaxRate"
                                    control={control}
                                    render={({ field }) => (
                                        <div className="relative mt-1">
                                            <Input 
                                                {...field} 
                                                value={field.value === null || field.value === undefined ? '' : field.value * 100} // Display as percentage
                                                onChange={e => {
                                                    const val = e.target.value;
                                                    if (val === '') field.onChange(null);
                                                    else {
                                                        const numVal = parseFloat(val);
                                                        if (!isNaN(numVal)) field.onChange(numVal / 100); // Store as decimal
                                                    }
                                                }}
                                                id="defaultTaxRate" 
                                                type="number" 
                                                placeholder="e.g., 10 for 10%" 
                                                min="0" 
                                                max="100" // Input as percentage
                                                step="0.01" 
                                                className={`pr-8 ${errors.defaultTaxRate ? 'border-red-500' : ''}`} />
                                            <Percent className="absolute right-2.5 top-2.5 h-4 w-4 text-slate-400" />
                                        </div>
                                    )}
                                />
                                <p className="mt-1 text-xs text-slate-500">Enter as a percentage (e.g., 10 for 10%). Stored as decimal (0.1).</p>
                                {errors.defaultTaxRate && <p className="mt-1 text-sm text-red-600">{errors.defaultTaxRate.message}</p>}
                            </div>
                          </div>
                        </motion.div>
                      )}

                      {/* Step 4: Inventory & Spatial Settings */}
                      {currentStep === 4 && (
                        <motion.div variants={sectionVariants} initial="hidden" animate="visible" exit="exit">
                            <h3 className="text-2xl font-semibold text-slate-800 mb-1">Inventory & Spatial Settings</h3>
                            <p className="text-sm text-slate-500 mb-6">Configure inventory management and spatial tracking options.</p>
                            
                            {/* Inventory Settings Section */}
                            <Card className="mb-6 bg-slate-50/50">
                                <CardHeader>
                                    <CardTitle className="text-lg flex items-center"><Package className="mr-2 h-5 w-5 text-sky-600"/>Inventory Settings</CardTitle>
                                </CardHeader>
                                <CardContent className="space-y-6">
                                    <div>
                                        <Label htmlFor="inventoryPolicy" className="text-sm font-medium text-slate-700">Inventory Policy</Label>
                                        <Controller
                                            name="inventoryPolicy"
                                            control={control}
                                            render={({ field }) => (
                                                <Select onValueChange={field.onChange} defaultValue={field.value}>
                                                    <SelectTrigger id="inventoryPolicy" className={`mt-1 ${errors.inventoryPolicy ? 'border-red-500' : ''}`}>
                                                        <SelectValue placeholder="Select policy" />
                                                    </SelectTrigger>
                                                    <SelectContent>
                                                        {Object.values(InventoryPolicy).map(policy => (
                                                            <SelectItem key={policy} value={policy}>{policy.replace('_', ' ')}</SelectItem>
                                                        ))}
                                                    </SelectContent>
                                                </Select>
                                            )}
                                        />
                                        <p className="mt-1 text-xs text-slate-500">Determines how inventory is valued and consumed.</p>
                                        {errors.inventoryPolicy && <p className="mt-1 text-sm text-red-600">{errors.inventoryPolicy.message}</p>}
                                    </div>

                                    <div>
                                        <Label htmlFor="lowStockThreshold" className="text-sm font-medium text-slate-700">Low Stock Threshold</Label>
                                        <Controller
                                            name="lowStockThreshold"
                                            control={control}
                                            render={({ field }) => <Input {...field} value={field.value ?? ''} onChange={e => field.onChange(e.target.value === '' ? null : parseInt(e.target.value))} id="lowStockThreshold" type="number" placeholder="e.g., 10" min="0" className={`mt-1 ${errors.lowStockThreshold ? 'border-red-500' : ''}`} />}
                                        />
                                        <p className="mt-1 text-xs text-slate-500">Get alerts when stock for an item falls below this quantity.</p>
                                        {errors.lowStockThreshold && <p className="mt-1 text-sm text-red-600">{errors.lowStockThreshold.message}</p>}
                                    </div>

                                    <Controller
                                        name="negativeStock"
                                        control={control}
                                        render={({ field }) => (
                                            <div className="flex items-start space-x-3">
                                                <Checkbox id="negativeStock" checked={field.value} onCheckedChange={field.onChange} className="mt-1"/>
                                                <div className="grid gap-1.5 leading-none">
                                                    <Label htmlFor="negativeStock" className="text-sm font-medium text-slate-700">Allow Negative Inventory</Label>
                                                    <p className="text-xs text-slate-500">If enabled, stock levels can go below zero (e.g., for backorders).</p>
                                                </div>
                                            </div>
                                        )}
                                    />
                                </CardContent>
                            </Card>

                            {/* Spatial Settings Section */}
                            <Card className="bg-slate-50/50">
                                <CardHeader>
                                    <CardTitle className="text-lg flex items-center"><MapPin className="mr-2 h-5 w-5 text-sky-600"/>Spatial Settings</CardTitle>
                                </CardHeader>
                                <CardContent className="space-y-6">
                                    <Controller
                                        name="enableCapacityTracking"
                                        control={control}
                                        render={({ field }) => (
                                            <div className="flex items-start space-x-3">
                                                <Checkbox id="enableCapacityTracking" checked={field.value} onCheckedChange={field.onChange} className="mt-1"/>
                                                <div className="grid gap-1.5 leading-none">
                                                    <Label htmlFor="enableCapacityTracking" className="text-sm font-medium text-slate-700">Enable Capacity Tracking</Label>
                                                    <p className="text-xs text-slate-500">Track volume/weight capacity for storage locations.</p>
                                                </div>
                                            </div>
                                        )}
                                    />
                                    {formData.enableCapacityTracking && (
                                         <motion.div initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: 'auto' }} transition={{duration: 0.3}} className="pl-8">
                                            <Controller
                                                name="enforceSpatialConstraints"
                                                control={control}
                                                render={({ field }) => (
                                                    <div className="flex items-start space-x-3">
                                                        <Checkbox id="enforceSpatialConstraints" checked={field.value} onCheckedChange={field.onChange} className="mt-1"/>
                                                        <div className="grid gap-1.5 leading-none">
                                                            <Label htmlFor="enforceSpatialConstraints" className="text-sm font-medium text-slate-700">Enforce Spatial Constraints</Label>
                                                            <p className="text-xs text-slate-500">Prevent adding items if capacity is exceeded. (Requires capacity tracking)</p>
                                                        </div>
                                                    </div>
                                                )}
                                            />
                                        </motion.div>
                                    )}

                                    <Controller
                                        name="enableProductDimensions"
                                        control={control}
                                        render={({ field }) => (
                                            <div className="flex items-start space-x-3">
                                                <Checkbox id="enableProductDimensions" checked={field.value} onCheckedChange={field.onChange} className="mt-1"/>
                                                <div className="grid gap-1.5 leading-none">
                                                    <Label htmlFor="enableProductDimensions" className="text-sm font-medium text-slate-700">Enable Product Dimensions</Label>
                                                    <p className="text-xs text-slate-500">Track length, width, height, and weight for products.</p>
                                                </div>
                                            </div>
                                        )}
                                    />
                                    {formData.enableProductDimensions && (
                                        <motion.div initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: 'auto' }} transition={{duration: 0.3}} className="pl-8 grid grid-cols-1 md:grid-cols-3 gap-4 pt-4">
                                            <div>
                                                <Label htmlFor="defaultMeasurementUnit" className="text-sm font-medium text-slate-700">Default Volume Unit</Label>
                                                <Controller name="defaultMeasurementUnit" control={control} render={({field}) => (
                                                    <Select onValueChange={field.onChange} value={field.value ?? undefined}>
                                                        <SelectTrigger id="defaultMeasurementUnit" className="mt-1"><SelectValue placeholder="Select unit"/></SelectTrigger>
                                                        <SelectContent>
                                                            <SelectItem value={MeasurementUnit.CUBIC_METER}>Cubic Meter (m³)</SelectItem>
                                                            <SelectItem value={MeasurementUnit.CUBIC_FEET}>Cubic Feet (ft³)</SelectItem>
                                                            {/* Add other relevant volume units */}
                                                        </SelectContent>
                                                    </Select>
                                                )} />
                                                {errors.defaultMeasurementUnit && <p className="mt-1 text-xs text-red-600">{errors.defaultMeasurementUnit.message}</p>}
                                            </div>
                                             <div>
                                                <Label htmlFor="defaultDimensionUnit" className="text-sm font-medium text-slate-700">Default Dimension Unit</Label>
                                                <Controller name="defaultDimensionUnit" control={control} render={({field}) => (
                                                    <Select onValueChange={field.onChange} value={field.value ?? undefined}>
                                                        <SelectTrigger id="defaultDimensionUnit" className="mt-1"><SelectValue placeholder="Select unit"/></SelectTrigger>
                                                        <SelectContent>
                                                            <SelectItem value={MeasurementUnit.METER}>Meter (m)</SelectItem>
                                                            <SelectItem value={MeasurementUnit.FEET}>Feet (ft)</SelectItem>
                                                            {/* Add other relevant dimension units */}
                                                        </SelectContent>
                                                    </Select>
                                                )} />
                                                {errors.defaultDimensionUnit && <p className="mt-1 text-xs text-red-600">{errors.defaultDimensionUnit.message}</p>}
                                            </div>
                                            <div>
                                                <Label htmlFor="defaultWeightUnit" className="text-sm font-medium text-slate-700">Default Weight Unit</Label>
                                                <Controller name="defaultWeightUnit" control={control} render={({field}) => (
                                                    <Select onValueChange={field.onChange} value={field.value ?? undefined}>
                                                        <SelectTrigger id="defaultWeightUnit" className="mt-1"><SelectValue placeholder="Select unit"/></SelectTrigger>
                                                        <SelectContent>
                                                            <SelectItem value={MeasurementUnit.WEIGHT_KG}>Kilogram (kg)</SelectItem>
                                                            <SelectItem value={MeasurementUnit.WEIGHT_LB}>Pound (lb)</SelectItem>
                                                        </SelectContent>
                                                    </Select>
                                                )} />
                                                {errors.defaultWeightUnit && <p className="mt-1 text-xs text-red-600">{errors.defaultWeightUnit.message}</p>}
                                            </div>
                                        </motion.div>
                                    )}
                                </CardContent>
                            </Card>
                        </motion.div>
                      )}

                      {/* Navigation Buttons */}
                      <div className="pt-6 flex justify-between items-center">
                        <Button type="button" variant="outline" onClick={prevStep} disabled={currentStep === 1} className="hover:bg-slate-100">
                          Back
                        </Button>
                        <div className="flex items-center space-x-3">
                            <Button type="button" variant="ghost" onClick={() => reset(CreateOrganizationInputSchema.parse({}))} className="text-slate-600 hover:text-slate-800">
                                Reset Form
                            </Button>
                            {currentStep < steps.length ? (
                            <Button type="button" onClick={() => { setDirection(1); nextStep();}} className="bg-sky-600 hover:bg-sky-700 text-white">
                                Next
                            </Button>
                            ) : (
                            <Button type="submit" className="bg-green-600 hover:bg-green-700 text-white" disabled={!isValid}>
                                Create Organization
                            </Button>
                            )}
                        </div>
                      </div>
                    </motion.form>
                  </AnimatePresence>
                </div>
              </div>
            </CardContent>
            <CardFooter className="p-6 bg-slate-50 border-t border-slate-200">
                <div className="flex items-center text-xs text-slate-500">
                    <Info className="h-4 w-4 mr-2 text-sky-500" />
                    <span>
                        Your organization settings can be updated later. 
                        For assistance, contact <a href="mailto:support@example.com" className="text-sky-600 hover:underline">support@example.com</a>.
                    </span>
                </div>
            </CardFooter>
          </Card>
        </motion.div>
      </div>
    </TooltipProvider>
  );
};

export default CreateOrganizationPage;