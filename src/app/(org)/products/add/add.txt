'use client';

import { useState, useTransition, useCallback, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Trash2, Loader2, CircleAlert, Edit, ImagePlus, Package, ShoppingBag, Boxes } from 'lucide-react';
import Image from 'next/image';
import { SectionHeader } from '@/components/ui/SectionHeader';
import { useCategories } from '@/lib/hooks/use-categories';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { useFieldArray, useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { ScrollArea } from '@/components/ui/scroll-area';
import { DragOverlay } from '@/components/ui/drag-overlay';
import { Checkbox } from '@/components/ui/checkbox';
import { Prisma } from '@/prisma/client';
import Loading from './loading'; // Assuming a loading component exists
import {
  EditProductSchema, // Using only EditProductSchema
  ProductVariantInput,
  ProductSupplierInput,
  EditProductSchemaType,
} from '@/lib/validations/product'; // Ensure your validation schema is updated
import { useLocations } from '@/hooks/use-warehouse';

// Define ProductForEditing with new fields
export type ProductForEditing = EditProductSchemaType & {
  id: string;
  variants: (ProductVariantInput & { id?: string })[];
  suppliers: (ProductSupplierInput & { id?: string })[];
  // Add new fields to the type if they are part of the product data structure fetched from the backend
  restockUnit?: string | null;
  itemsPerUnit?: number | null;
  sellingUnit?: string | null;
};

interface EditProductFormProps {
  product: ProductForEditing; // Product is now mandatory
}

// Updated Zod Schema (EditProductSchema) should include these new fields:
// restockUnit: z.string().optional().nullable(),
// itemsPerUnit: z.number().positive().optional().nullable(),
// sellingUnit: z.string().optional().nullable(),

export default function EditProductForm({ product }: EditProductFormProps) {
  const router = useRouter();
  const [isPending, startTransition] = useTransition();
  const [isUploading, setIsUploading] = useState(false);
  const [generalError, setGeneralError] = useState<string | null>(null);
  const [variantModalOpen, setVariantModalOpen] = useState(false);
  const [editingVariant, setEditingVariant] = useState<(ProductVariantInput & { id?: string; index?: number }) | null>(
    null
  );
  const [isDragging, setIsDragging] = useState(false);
  const [previewFiles, setPreviewFiles] = useState<{ file: File; preview: string }[]>([]);

  const form = useForm<EditProductSchemaType>({
    resolver: zodResolver(EditProductSchema), // Use EditProductSchema directly
    defaultValues: {
      // Initialize with product data, including new fields
      name: '',
      description: null,
      sku: null,
      barcode: null,
      categoryId: '',
      basePrice: 0,
      baseCost: null,
      isActive: true,
      imageUrls: [],
      customFields: Prisma.JsonNull,
      width: null,
      height: null,
      length: null,
      dimensionUnit: 'cm',
      weight: null,
      weightUnit: 'kg',
      volumetricWeight: null,
      reorderPoint: 5,
      defaultLocationId: null,
      // New fields
      restockUnit: null,
      itemsPerUnit: null,
      sellingUnit: null,
      variants: [],
      suppliers: [],
      productId: product.id, // productId is part of EditProductSchema
    },
  });

  useEffect(() => {
    if (product) {
      form.reset({
        ...product,
        productId: product.id,
        description: product.description ?? null,
        sku: product.sku ?? null,
        barcode: product.barcode ?? null,
        baseCost: product.baseCost ?? null,
        customFields: product.customFields ?? Prisma.JsonNull,
        width: product.width ?? null,
        height: product.height ?? null,
        length: product.length ?? null,
        weight: product.weight ?? null,
        volumetricWeight: product.volumetricWeight ?? null,
        defaultLocationId: product.defaultLocationId ?? null,
        restockUnit: product.restockUnit ?? null,
        itemsPerUnit: product.itemsPerUnit ?? null,
        sellingUnit: product.sellingUnit ?? null,
        variants:
          product.variants?.map(v => ({
            ...v,
            sku: v.sku ?? null,
            barcode: v.barcode ?? null,
            attributes: v.attributes ?? Prisma.JsonNull,
          })) ?? [],
        suppliers:
          product.suppliers?.map(s => ({
            ...s,
            supplierSku: s.supplierSku ?? null,
            minimumOrderQuantity: s.minimumOrderQuantity ?? null,
            packagingUnit: s.packagingUnit ?? null,
          })) ?? [],
      });
      // Set initial preview for existing images
      if (product.imageUrls) {
        form.setValue('imageUrls', product.imageUrls);
      }
    }
  }, [product, form]);

  const {
    fields: variantFields,
    append: appendVariant,
    remove: removeVariant,
    update: updateVariant,
  } = useFieldArray({
    control: form.control,
    name: 'variants',
  });

  const { data: locationsResult, error: locationsError, isLoading: isLoadingLocations } = useLocations();
  const locations = locationsResult?.warehouses || [];
  const { data: categoriesResult, error: categoriesError, isLoading: isLoadingCategories } = useCategories();
  const categories = categoriesResult?.data || [];

  const handleImageUpload = useCallback(
    async (files: FileList) => {
      if (!files.length) return;
      const newPreviews = Array.from(files).map(file => ({ file, preview: URL.createObjectURL(file) }));
      setPreviewFiles(prev => [...prev, ...newPreviews]);
      setIsUploading(true);
      setGeneralError(null);

      const uploadedUrls: string[] = [];
      try {
        for (const { file } of newPreviews) {
          const formData = new FormData();
          formData.append('file', file);
          const response = await fetch('/api/upload', { method: 'POST', body: formData });
          if (!response.ok) throw new Error(`Upload failed for ${file.name}. Status: ${response.status}`);
          const data = await response.json();
          if (!data.url) throw new Error(`Invalid response for ${file.name}`);
          uploadedUrls.push(data.url);
        }
        const currentUrls = form.getValues('imageUrls') || [];
        form.setValue('imageUrls', [...currentUrls, ...uploadedUrls], { shouldValidate: true, shouldDirty: true });
        toast.success('Images uploaded successfully!');
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Image upload failed. Please try again.';
        setGeneralError(errorMessage);
        toast.error(errorMessage);
      } finally {
        newPreviews.forEach(p => URL.revokeObjectURL(p.preview)); // Clean up object URLs
        setPreviewFiles(prev => prev.filter(p => !newPreviews.some(np => np.preview === p.preview)));
        setIsUploading(false);
      }
    },
    [form]
  );

  const removeImage = useCallback(
    (urlToRemove: string) => {
      const currentUrls = form.getValues('imageUrls') || [];
      form.setValue(
        'imageUrls',
        currentUrls.filter(url => url !== urlToRemove),
        { shouldValidate: true, shouldDirty: true }
      );
      toast.info('Image marked for removal. Save changes to confirm.');
    },
    [form]
  );

  const handleOpenVariantModal = (variant?: ProductVariantInput & { id?: string; index?: number }) => {
    setEditingVariant(variant || null);
    setVariantModalOpen(true);
  };

  const handleSaveVariant = (variantData: ProductVariantInput & { id?: string }, index?: number) => {
    if (index !== undefined && editingVariant) {
      // Editing existing variant
      updateVariant(index, variantData);
      toast.success('Variant updated.');
    } else {
      // Adding new variant
      appendVariant(variantData);
      toast.success('Variant added.');
    }
    setVariantModalOpen(false);
    setEditingVariant(null);
  };

  const onSubmit = async (data: EditProductSchemaType) => {
    setGeneralError(null);
    startTransition(async () => {
      try {
        const apiUrl = `/api/products/${product.id}`; // Always use product.id
        const apiMethod = 'PUT';

        // Filter out any temporary IDs from variants before sending to backend if not needed
        const payload = {
          ...data,
          variants: data.variants?.map(({ id, ...rest }) => {
            // If your backend expects variant IDs for updates, keep them.
            // If new variants shouldn't have an 'id' field, or it should be different, adjust here.
            // For this example, we assume existing variants have an ID and new ones don't need a client-generated one.
            return id && product.variants.find(v => v.id === id) ? { id, ...rest } : rest;
          }),
          suppliers: data.suppliers?.map(({ id, ...rest }) => {
            return id && product.suppliers.find(s => s.id === id) ? { id, ...rest } : rest;
          }),
        };

        // Using JSON payload as per modern practices, FormData can be complex for nested structures
        // If your backend specifically requires FormData, you'll need to adapt the previous FormData logic
        const response = await fetch(apiUrl, {
          method: apiMethod,
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        });

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({ message: `HTTP error! status: ${response.status}` }));
          const errorMessage = errorData.message || `HTTP error! status: ${response.status}`;
          if (errorData.fieldErrors) {
            Object.entries(errorData.fieldErrors).forEach(([field, errors]) => {
              if (Array.isArray(errors)) {
                form.setError(field as any, { type: 'server', message: errors.join(', ') });
              }
            });
          }
          throw new Error(errorMessage);
        }

        await response.json();
        toast.success('Product updated successfully!');
        router.push('/products'); // Or to the product detail page
        router.refresh();
      } catch (error: unknown) {
        const message = error instanceof Error ? error.message : 'An unexpected error occurred.';
        setGeneralError(message);
        toast.error(message);
      }
    });
  };

  if (isLoadingCategories || isLoadingLocations) {
    return <Loading />;
  }

  const dataLoadingError = categoriesError || locationsError;
  if (dataLoadingError) {
    return (
      <div className="container mx-auto p-4">
        <Alert variant="destructive">
          <CircleAlert className="h-4 w-4" />
          <AlertTitle>Error Loading Data</AlertTitle>
          <AlertDescription>
            Failed to load required data: {dataLoadingError.message}. Please try refreshing the page.
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <>
      {/* <ProductVariantModal
        key={editingVariant ? `edit-${editingVariant.id || JSON.stringify(editingVariant)}` : 'add-new-variant'}
        open={variantModalOpen}
        onOpenChange={setVariantModalOpen}
        productName={form.getValues('name')}
        variant={editingVariant}
        onSave={handleSaveVariant}
        existingVariants={variantFields}
      /> */}

      <div className="container mx-auto p-6 sm:p-8 space-y-8 bg-gradient-to-br from-slate-900 to-slate-800 text-white min-h-screen">
        <SectionHeader
          title="Edit Product"
          subtitle={`Update the details for "${product.name}"`}
          icon={<Edit className="h-8 w-8 text-sky-400 mt-1" />}
          className="text-slate-100"
          subtitleClassName="text-slate-400"
        />

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-10">
            {generalError && (
              <Alert variant="destructive" className="bg-red-700/20 border-red-500 text-red-300">
                <CircleAlert className="h-4 w-4 text-red-400" />
                <AlertTitle className="text-red-300">Error</AlertTitle>
                <AlertDescription>{generalError}</AlertDescription>
              </Alert>
            )}

            <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
              {/* Left Column */}
              <div className="lg:col-span-7 space-y-8">
                <Card className="bg-slate-800/70 border-slate-700 shadow-xl transition-all hover:shadow-sky-500/20">
                  <CardHeader className="pb-3 border-b border-slate-700">
                    <CardTitle className="text-sky-400 text-xl flex items-center gap-2">
                      <Package className="h-5 w-5" />
                      Core Details
                    </CardTitle>
                    <CardDescription className="text-slate-400">Key information about the product.</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6 pt-6">
                    <FormField
                      control={form.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-300">Product Name *</FormLabel>
                          <FormControl>
                            <Input
                              placeholder="e.g., Aurora Glow Serum"
                              {...field}
                              className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100"
                            />
                          </FormControl>
                          <FormMessage className="text-red-400" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="description"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-300">Description</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="Detailed description of the product benefits, ingredients, and usage..."
                              {...field}
                              value={field.value ?? ''}
                              className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100 min-h-[120px] resize-y"
                            />
                          </FormControl>
                          <FormMessage className="text-red-400" />
                        </FormItem>
                      )}
                    />
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="sku"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-slate-300">SKU (Stock Keeping Unit)</FormLabel>
                            <FormControl>
                              <Input
                                placeholder="e.g., AGS-30ML"
                                {...field}
                                value={field.value ?? ''}
                                className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100"
                              />
                            </FormControl>
                            <FormMessage className="text-red-400" />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="barcode"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-slate-300">Barcode (GTIN, UPC, EAN)</FormLabel>
                            <FormControl>
                              <Input
                                placeholder="e.g., 9876543210123"
                                {...field}
                                value={field.value ?? ''}
                                className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100"
                              />
                            </FormControl>
                            <FormMessage className="text-red-400" />
                          </FormItem>
                        )}
                      />
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="categoryId"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-slate-300">Category *</FormLabel>
                            <Select
                              value={field.value}
                              onValueChange={field.onChange}
                              disabled={isPending || isLoadingCategories}
                            >
                              <FormControl>
                                <SelectTrigger className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100">
                                  {isLoadingCategories ? (
                                    <span className="text-slate-400">Loading...</span>
                                  ) : (
                                    <SelectValue placeholder="Select a category" />
                                  )}
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent className="bg-slate-800 border-slate-700 text-slate-200">
                                {categories.map(category => (
                                  <SelectItem
                                    key={category.id}
                                    value={category.id}
                                    className="hover:bg-slate-700 focus:bg-slate-700"
                                  >
                                    {category.name}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage className="text-red-400" />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="basePrice"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-slate-300">Base Selling Price *</FormLabel>
                            <FormControl>
                              <Input
                                type="text"
                                inputMode="decimal"
                                placeholder="0.00"
                                {...field}
                                onChange={e => field.onChange(e.target.value === '' ? null : Number(e.target.value))}
                                className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100"
                              />
                            </FormControl>
                            <FormMessage className="text-red-400" />
                          </FormItem>
                        )}
                      />
                    </div>
                  </CardContent>
                </Card>

                <Card className="bg-slate-800/70 border-slate-700 shadow-xl transition-all hover:shadow-sky-500/20">
                  <CardHeader className="pb-3 border-b border-slate-700">
                    <CardTitle className="text-sky-400 text-xl flex items-center gap-2">
                      <ShoppingBag className="h-5 w-5" />
                      Purchasing & Units
                    </CardTitle>
                    <CardDescription className="text-slate-400">
                      Configure how this product is bought and sold.
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6 pt-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="baseCost"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-slate-300">Base Cost Price</FormLabel>
                            <FormControl>
                              <Input
                                type="text"
                                inputMode="decimal"
                                placeholder="0.00"
                                {...field}
                                value={field.value ?? ''}
                                onChange={e => field.onChange(e.target.value === '' ? null : Number(e.target.value))}
                                className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100"
                              />
                            </FormControl>
                            <FormMessage className="text-red-400" />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="sellingUnit"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-slate-300">Selling Unit</FormLabel>
                            <Select value={field.value ?? ''} onValueChange={field.onChange}>
                              <FormControl>
                                <SelectTrigger className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100">
                                  <SelectValue placeholder="e.g., Piece, Pack" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent className="bg-slate-800 border-slate-700 text-slate-200">
                                <SelectItem value="piece" className="hover:bg-slate-700 focus:bg-slate-700">
                                  Piece
                                </SelectItem>
                                <SelectItem value="pack" className="hover:bg-slate-700 focus:bg-slate-700">
                                  Pack
                                </SelectItem>
                                <SelectItem value="set" className="hover:bg-slate-700 focus:bg-slate-700">
                                  Set
                                </SelectItem>
                                <SelectItem value="kg" className="hover:bg-slate-700 focus:bg-slate-700">
                                  Kilogram (kg)
                                </SelectItem>
                                <SelectItem value="g" className="hover:bg-slate-700 focus:bg-slate-700">
                                  Gram (g)
                                </SelectItem>
                                <SelectItem value="litre" className="hover:bg-slate-700 focus:bg-slate-700">
                                  Litre (L)
                                </SelectItem>
                                <SelectItem value="ml" className="hover:bg-slate-700 focus:bg-slate-700">
                                  Millilitre (ml)
                                </SelectItem>
                              </SelectContent>
                            </Select>
                            <FormDescription className="text-slate-500">
                              Unit in which product is sold to customers.
                            </FormDescription>
                            <FormMessage className="text-red-400" />
                          </FormItem>
                        )}
                      />
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="restockUnit"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-slate-300">Restock Unit</FormLabel>
                            <Select value={field.value ?? ''} onValueChange={field.onChange}>
                              <FormControl>
                                <SelectTrigger className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100">
                                  <SelectValue placeholder="e.g., Case, Box" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent className="bg-slate-800 border-slate-700 text-slate-200">
                                <SelectItem value="case" className="hover:bg-slate-700 focus:bg-slate-700">
                                  Case
                                </SelectItem>
                                <SelectItem value="box" className="hover:bg-slate-700 focus:bg-slate-700">
                                  Box
                                </SelectItem>
                                <SelectItem value="pallet" className="hover:bg-slate-700 focus:bg-slate-700">
                                  Pallet
                                </SelectItem>
                                <SelectItem value="unit" className="hover:bg-slate-700 focus:bg-slate-700">
                                  Unit (Same as selling)
                                </SelectItem>
                              </SelectContent>
                            </Select>
                            <FormDescription className="text-slate-500">
                              Unit used for purchasing/restocking.
                            </FormDescription>
                            <FormMessage className="text-red-400" />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="itemsPerUnit"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-slate-300">Items per Restock Unit</FormLabel>
                            <FormControl>
                              <Input
                                type="number"
                                inputMode="numeric"
                                step="1"
                                placeholder="e.g., 12"
                                {...field}
                                value={field.value ?? ''}
                                onChange={e => field.onChange(e.target.value === '' ? null : Number(e.target.value))}
                                className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100"
                              />
                            </FormControl>
                            <FormDescription className="text-slate-500">
                              Number of selling units in one restock unit.
                            </FormDescription>
                            <FormMessage className="text-red-400" />
                          </FormItem>
                        )}
                      />
                    </div>
                  </CardContent>
                </Card>

                <Card className="bg-slate-800/70 border-slate-700 shadow-xl transition-all hover:shadow-sky-500/20">
                  <CardHeader className="pb-3 border-b border-slate-700">
                    <CardTitle className="text-sky-400 text-xl flex items-center gap-2">
                      <Boxes className="h-5 w-5" />
                      Physical & Inventory
                    </CardTitle>
                    <CardDescription className="text-slate-400">Dimensions, weight, and stock control.</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6 pt-6">
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      {(['width', 'height', 'length'] as const).map(dim => (
                        <FormField
                          key={dim}
                          control={form.control}
                          name={dim}
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="capitalize text-slate-300">{dim}</FormLabel>
                              <FormControl>
                                <Input
                                  type="text"
                                  inputMode="decimal"
                                  placeholder="0.0"
                                  {...field}
                                  value={field.value ?? ''}
                                  onChange={e => field.onChange(e.target.value === '' ? null : Number(e.target.value))}
                                  className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100"
                                />
                              </FormControl>
                              <FormMessage className="text-red-400" />
                            </FormItem>
                          )}
                        />
                      ))}
                      <FormField
                        control={form.control}
                        name="dimensionUnit"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-slate-300">Unit</FormLabel>
                            <Select value={field.value} onValueChange={field.onChange}>
                              <FormControl>
                                <SelectTrigger className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100">
                                  <SelectValue placeholder="Unit" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent className="bg-slate-800 border-slate-700 text-slate-200">
                                <SelectItem value="cm" className="hover:bg-slate-700 focus:bg-slate-700">
                                  cm
                                </SelectItem>
                                <SelectItem value="m" className="hover:bg-slate-700 focus:bg-slate-700">
                                  m
                                </SelectItem>
                                <SelectItem value="in" className="hover:bg-slate-700 focus:bg-slate-700">
                                  in
                                </SelectItem>
                                <SelectItem value="ft" className="hover:bg-slate-700 focus:bg-slate-700">
                                  ft
                                </SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage className="text-red-400" />
                          </FormItem>
                        )}
                      />
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="weight"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-slate-300">Weight</FormLabel>
                            <FormControl>
                              <Input
                                type="text"
                                inputMode="decimal"
                                placeholder="0.00"
                                {...field}
                                value={field.value ?? ''}
                                onChange={e => field.onChange(e.target.value === '' ? null : Number(e.target.value))}
                                className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100"
                              />
                            </FormControl>
                            <FormMessage className="text-red-400" />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="weightUnit"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-slate-300">Weight Unit</FormLabel>
                            <Select value={field.value} onValueChange={field.onChange}>
                              <FormControl>
                                <SelectTrigger className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100">
                                  <SelectValue placeholder="Select unit" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent className="bg-slate-800 border-slate-700 text-slate-200">
                                <SelectItem value="kg" className="hover:bg-slate-700 focus:bg-slate-700">
                                  kg
                                </SelectItem>
                                <SelectItem value="g" className="hover:bg-slate-700 focus:bg-slate-700">
                                  g
                                </SelectItem>
                                <SelectItem value="lb" className="hover:bg-slate-700 focus:bg-slate-700">
                                  lb
                                </SelectItem>
                                <SelectItem value="oz" className="hover:bg-slate-700 focus:bg-slate-700">
                                  oz
                                </SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage className="text-red-400" />
                          </FormItem>
                        )}
                      />
                    </div>
                    <FormField
                      control={form.control}
                      name="reorderPoint"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-300">Reorder Point</FormLabel>
                          <FormControl>
                            <Input
                              type="number"
                              step="1"
                              placeholder="e.g., 10"
                              {...field}
                              onChange={e => field.onChange(Number(e.target.value))}
                              className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100"
                            />
                          </FormControl>
                          <FormDescription className="text-slate-500">
                            Low stock threshold to trigger reordering.
                          </FormDescription>
                          <FormMessage className="text-red-400" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="defaultLocationId"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-300">Default Warehouse Location</FormLabel>
                          <Select
                            value={field.value ?? ''}
                            onValueChange={field.onChange}
                            disabled={isPending || isLoadingLocations}
                          >
                            <FormControl>
                              <SelectTrigger className="bg-slate-700 border-slate-600 focus:border-sky-500 text-slate-100">
                                <SelectValue placeholder="Select a default location" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent className="bg-slate-800 border-slate-700 text-slate-200">
                              {locations.map(location => (
                                <SelectItem
                                  key={location.id}
                                  value={location.id}
                                  className="hover:bg-slate-700 focus:bg-slate-700"
                                >
                                  {location.name}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage className="text-red-400" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="isActive"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center space-x-3 space-y-0 rounded-md border border-slate-700 p-4 bg-slate-800/50 hover:bg-slate-700/70 transition-colors">
                          <FormControl>
                            <Checkbox
                              checked={field.value}
                              onCheckedChange={field.onChange}
                              id="isActive"
                              className="border-slate-600 data-[state=checked]:bg-sky-500 data-[state=checked]:text-slate-900"
                            />
                          </FormControl>
                          <div className="space-y-1 leading-none">
                            <FormLabel htmlFor="isActive" className="text-slate-300 cursor-pointer">
                              Active Product
                            </FormLabel>
                            <FormDescription className="text-slate-400">
                              Makes this product available for sale and visible in listings.
                            </FormDescription>
                          </div>
                        </FormItem>
                      )}
                    />
                  </CardContent>
                </Card>
              </div>

              {/* Right Column */}
              <div className="lg:col-span-5 space-y-8">
                <Card className="bg-slate-800/70 border-slate-700 shadow-xl transition-all hover:shadow-sky-500/20">
                  <CardHeader className="pb-3 border-b border-slate-700">
                    <CardTitle className="text-sky-400 text-xl flex items-center justify-between">
                      <span className="flex items-center gap-2">
                        <ImagePlus className="h-5 w-5" /> Product Images
                      </span>
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        className="border-sky-500 text-sky-400 hover:bg-sky-500 hover:text-slate-900 h-8"
                        onClick={() => document.getElementById('imageUploadInput')?.click()}
                        disabled={isUploading || isPending}
                      >
                        {isUploading ? (
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ) : (
                          <ImagePlus className="mr-2 h-4 w-4" />
                        )}
                        Add
                      </Button>
                    </CardTitle>
                    <CardDescription className="text-slate-400">Upload or drag & drop product images.</CardDescription>
                  </CardHeader>
                  <CardContent className="pt-6">
                    <FormField
                      control={form.control}
                      name="imageUrls"
                      render={({ field }) => (
                        <FormItem>
                          <FormControl>
                            <>
                              <Input
                                id="imageUploadInput"
                                type="file"
                                accept="image/*"
                                multiple
                                className="hidden"
                                onChange={e => e.target.files && handleImageUpload(e.target.files)}
                                disabled={isUploading || isPending}
                              />
                              <div
                                className={`relative min-h-[250px] border-2 border-dashed rounded-lg ${
                                  isDragging
                                    ? 'border-sky-500 bg-sky-700/20'
                                    : 'border-slate-600 hover:border-slate-500'
                                } transition-all duration-200 flex flex-col items-center justify-center p-4 text-center group`}
                                onDragOver={e => {
                                  e.preventDefault();
                                  setIsDragging(true);
                                }}
                                onDragLeave={() => setIsDragging(false)}
                                onDrop={e => {
                                  e.preventDefault();
                                  setIsDragging(false);
                                  if (e.dataTransfer.files) handleImageUpload(e.dataTransfer.files);
                                }}
                              >
                                {(field.value?.length ?? 0) > 0 || previewFiles.length > 0 ? (
                                  <ScrollArea className="w-full h-[230px] mt-2">
                                    <div className="grid grid-cols-2 sm:grid-cols-3 gap-3 pr-3">
                                      {previewFiles.map(item => (
                                        <div
                                          key={item.preview}
                                          className="relative group aspect-square rounded-md overflow-hidden border border-slate-700"
                                        >
                                          <div className="absolute inset-0 flex items-center justify-center bg-slate-900/70 z-10">
                                            <Loader2 className="h-8 w-8 animate-spin text-sky-400" />
                                          </div>
                                          <Image
                                            src={item.preview}
                                            alt="Uploading preview"
                                            fill
                                            className="object-cover"
                                          />
                                        </div>
                                      ))}
                                      {field.value?.map(url => (
                                        <div
                                          key={url}
                                          className="relative group aspect-square rounded-md overflow-hidden border border-slate-700"
                                        >
                                          <Image
                                            src={url}
                                            alt="Product Image"
                                            fill
                                            className="object-cover transition-transform group-hover:scale-105"
                                          />
                                          <div className="absolute inset-0 flex items-center justify-center bg-slate-900/60 opacity-0 group-hover:opacity-100 transition-opacity z-10">
                                            <Button
                                              type="button"
                                              variant="destructive"
                                              size="icon"
                                              className="h-9 w-9 bg-red-600 hover:bg-red-700"
                                              onClick={() => removeImage(url)}
                                              disabled={isPending}
                                            >
                                              <Trash2 className="h-4 w-4" />
                                            </Button>
                                          </div>
                                        </div>
                                      ))}
                                    </div>
                                  </ScrollArea>
                                ) : (
                                  <label
                                    htmlFor="imageUploadInput"
                                    className="flex flex-col items-center justify-center h-full cursor-pointer text-slate-400 group-hover:text-sky-400 transition-colors"
                                  >
                                    <ImagePlus className="h-12 w-12 mb-3" />
                                    <p className="text-sm mb-1">
                                      {isUploading ? 'Uploading...' : 'Drag & drop or click to browse'}
                                    </p>
                                    <p className="text-xs text-slate-500">Recommended: Square, high-res images</p>
                                  </label>
                                )}
                                {isDragging && (
                                  <DragOverlay
                                    text="Drop images here"
                                    className="bg-sky-600/30 text-sky-200 border-sky-400"
                                  />
                                )}
                              </div>
                            </>
                          </FormControl>
                          <FormMessage className="text-red-400" />
                        </FormItem>
                      )}
                    />
                  </CardContent>
                </Card>

                <Card className="bg-slate-800/70 border-slate-700 shadow-xl transition-all hover:shadow-sky-500/20">
                  <CardHeader className="pb-3 border-b border-slate-700">
                    <CardTitle className="text-sky-400 text-xl flex items-center justify-between">
                      <span className="flex items-center gap-2">
                        <Package className="h-5 w-5 rotate-90" /> Product Variants
                      </span>
                      <Button
                        type="button"
                        variant="outline"
                        className="border-sky-500 text-sky-400 hover:bg-sky-500 hover:text-slate-900 h-8"
                        onClick={() => handleOpenVariantModal()}
                      >
                        Add Variant
                      </Button>
                    </CardTitle>
                    <CardDescription className="text-slate-400">
                      Manage different options like size, color, material.
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="pt-6">
                    {variantFields.length > 0 ? (
                      <ScrollArea className="h-64">
                        <div className="space-y-3 pr-2">
                          {variantFields.map((field, index) => (
                            <div
                              key={field.id}
                              className="p-4 border border-slate-700 rounded-lg bg-slate-800 hover:border-sky-600 transition-all group cursor-pointer"
                              onClick={() =>
                                handleOpenVariantModal({ ...form.getValues(`variants.${index}`), id: field.id, index })
                              }
                            >
                              <div className="flex justify-between items-center">
                                <p className="font-medium text-slate-200 group-hover:text-sky-400 transition-colors">
                                  {form.watch(`variants.${index}.name`) || `Variant ${index + 1}`}
                                </p>
                                <div className="flex items-center gap-2">
                                  <span
                                    className={`px-2 py-0.5 rounded-full text-xs font-semibold ${form.watch(`variants.${index}.isActive`) ? 'bg-green-500/20 text-green-400' : 'bg-red-500/20 text-red-400'}`}
                                  >
                                    {form.watch(`variants.${index}.isActive`) ? 'Active' : 'Inactive'}
                                  </span>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="icon"
                                    className="h-7 w-7 text-slate-400 hover:text-red-500 hover:bg-red-500/10 opacity-0 group-hover:opacity-100 transition-opacity"
                                    onClick={e => {
                                      e.stopPropagation();
                                      removeVariant(index);
                                      toast.info('Variant removed. Save product to confirm.');
                                    }}
                                  >
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                </div>
                              </div>
                              <div className="mt-2 text-sm text-slate-400 space-y-1">
                                <div className="flex justify-between">
                                  <span className="text-slate-500">SKU:</span>{' '}
                                  <span>{form.watch(`variants.${index}.sku`) || 'N/A'}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-slate-500">Price Mod:</span>{' '}
                                  <span>
                                    {form.watch(`variants.${index}.priceModifierType`) === 'percentage'
                                      ? `${form.watch(`variants.${index}.priceModifier`)}%`
                                      : `$${form.watch(`variants.${index}.priceModifier`)}`}
                                  </span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-slate-500">Stock:</span>{' '}
                                  <span>{form.watch(`variants.${index}.stockQuantity`)}</span>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      </ScrollArea>
                    ) : (
                      <div className="p-6 text-center border-2 border-dashed border-slate-700 rounded-lg">
                        <p className="text-slate-400 mb-3">No variants defined. The product will use base details.</p>
                        <Button
                          type="button"
                          variant="outline"
                          className="border-sky-500 text-sky-400 hover:bg-sky-500 hover:text-slate-900"
                          onClick={() => handleOpenVariantModal()}
                        >
                          Add First Variant
                        </Button>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            </div>

            <div className="sticky bottom-0 -mx-6 -mb-8 sm:-mx-8 sm:-mb-8 mt-12 p-4 bg-slate-900/80 border-t border-slate-700 backdrop-blur-sm z-20">
              <div className="container mx-auto flex justify-between items-center">
                <Button
                  type="button"
                  variant="outline"
                  className="border-slate-600 text-slate-300 hover:bg-slate-700 hover:text-slate-100"
                  onClick={() => router.back()}
                  disabled={isPending}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  className="min-w-[160px] bg-sky-500 hover:bg-sky-600 text-slate-900 font-semibold disabled:bg-sky-500/50"
                  disabled={isPending || isUploading || (!form.formState.isDirty && !form.formState.isSubmitting)}
                >
                  {isPending ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Saving Changes...
                    </>
                  ) : (
                    'Save Product Changes'
                  )}
                </Button>
              </div>
            </div>
          </form>
        </Form>
      </div>
    </>
  );
}
