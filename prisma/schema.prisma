
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Core Models ---

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String // Remember to hash passwords!
  role      UserRole @default(EMPLOYEE)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  // sales             Sale[]
  purchases           Purchase[]
  purchasePayments    PurchasePayment[] // User who recorded the payment
  stockAdjustments    StockAdjustment[] // User who made the adjustment
  loyaltyTransactions LoyaltyTransaction[] // User who processed the loyalty transaction
  cashDrawers         CashDrawer[]
  emailVerified       Boolean
  image               String?
  banned              Boolean?
  banReason           String?
  banExpires          DateTime?
  username            String?
  displayUsername     String?
  accounts            Account[]
  members             Member[]
  invitations         Invitation[]

  @@unique([username])
  @@map("user")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

model Category {
  id            String     @id @default(cuid())
  name          String
  description   String?
  parentId      String?
  parent        Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id], onDelete: Restrict)
  subcategories Category[] @relation("CategoryToSubcategory")
  products      Product[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([name])
}

model Product {
  id           String   @id @default(cuid())
  name         String
  description  String?
  sku          String   @unique // Stock Keeping Unit
  barcode      String?  @unique
  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id])
  basePrice    Decimal  @db.Decimal(10, 2)
  reorderPoint Int      @default(5)
  isActive     Boolean  @default(true)
  imageUrls    String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  variants         ProductVariant[]
  suppliers        ProductSupplier[]
  saleItems        SaleItem[]
  purchaseItems    PurchaseItem[]
  stockBatches     StockBatch[]
  stockAdjustments StockAdjustment[] // Adjustments made to this product (base)

  @@index([name])
  @@index([sku])
}

model ProductVariant {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  name          String // e.g., "Red, Large"
  sku           String   @unique // Variant specific SKU
  barcode       String?  @unique
  priceModifier Decimal  @default(0) @db.Decimal(10, 2)
  attributes    Json // { "color": "Red", "size": "Large" }
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  saleItems        SaleItem[]
  purchaseItems    PurchaseItem[]
  stockBatches     StockBatch[]
  stockAdjustments StockAdjustment[] // <<< ADDED: Opposite relation for StockAdjustment

  @@unique([productId, sku])
  @@index([sku])
}

model Supplier {
  id           String   @id @default(cuid())
  name         String   @unique
  contactName  String?
  email        String?
  phone        String?
  address      String?
  paymentTerms String?
  leadTime     Int?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  products  ProductSupplier[]
  purchases Purchase[]

  @@index([name])
}

model ProductSupplier {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  supplierId  String
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  supplierSku String?
  costPrice   Decimal  @db.Decimal(10, 2)
  isPreferred Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productId, supplierId])
  @@index([supplierId])
}

model Customer {
  id            String   @id @default(cuid())
  name          String
  email         String?  @unique
  phone         String?
  address       String?
  notes         String?
  loyaltyPoints Int      @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String

  // Relations
  sales               Sale[]
  loyaltyTransactions LoyaltyTransaction[]

  @@index([name])
  @@index([email])
}

// --- Transactional Models ---

model Sale {
  id             String        @id @default(cuid())
  saleNumber     String        @unique
  customerId     String?
  customer       Customer?     @relation(fields: [customerId], references: [id])
  // userId           String
  // user             User                @relation(fields: [userId], references: [id])
  saleDate       DateTime      @default(now())
  totalAmount    Decimal       @db.Decimal(10, 2)
  discountAmount Decimal       @db.Decimal(10, 2) @default(0)
  taxAmount      Decimal       @db.Decimal(10, 2) @default(0)
  finalAmount    Decimal       @db.Decimal(10, 2)
  paymentMethod  PaymentMethod
  paymentStatus  PaymentStatus @default(PENDING)
  notes          String?
  cashDrawerId   String?
  cashDrawer     CashDrawer?   @relation(fields: [cashDrawerId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  receiptUrl         String?
  items              SaleItem[]
  attachments        Attachment[]
  loyaltyTransaction LoyaltyTransaction?

  // @@index([userId])
  @@index([saleDate])
  @@index([customerId])
}

model SaleItem {
  id             String          @id @default(cuid())
  saleId         String
  sale           Sale            @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId      String
  product        Product         @relation(fields: [productId], references: [id])
  variantId      String?
  variant        ProductVariant? @relation(fields: [variantId], references: [id])
  stockBatchId   String
  stockBatch     StockBatch      @relation(fields: [stockBatchId], references: [id])
  quantity       Int
  unitPrice      Decimal         @db.Decimal(10, 2)
  unitCost       Decimal         @db.Decimal(10, 2)
  discountAmount Decimal         @db.Decimal(10, 2) @default(0)
  taxRate        Decimal         @db.Decimal(5, 4) @default(0)
  taxAmount      Decimal         @db.Decimal(10, 2)
  totalAmount    Decimal         @db.Decimal(10, 2)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([saleId])
  @@index([productId])
  @@index([variantId])
  @@index([stockBatchId])
}

model Purchase {
  id             String         @id @default(cuid())
  purchaseNumber String         @unique
  supplierId     String
  supplier       Supplier       @relation(fields: [supplierId], references: [id])
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  orderDate      DateTime       @default(now())
  expectedDate   DateTime?
  receivedDate   DateTime?
  totalAmount    Decimal        @db.Decimal(10, 2) // Should be calculated from items
  paidAmount     Decimal        @default(0) @db.Decimal(10, 2)
  status         PurchaseStatus @default(ORDERED)
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  items       PurchaseItem[]
  payments    PurchasePayment[]
  attachments Attachment[]

  @@index([orderDate])
  @@index([supplierId])
  @@index([status])
}

model PurchaseItem {
  id               String          @id @default(cuid())
  purchaseId       String
  purchase         Purchase        @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  productId        String
  product          Product         @relation(fields: [productId], references: [id])
  variantId        String?
  variant          ProductVariant? @relation(fields: [variantId], references: [id])
  orderedQuantity  Int
  receivedQuantity Int             @default(0)
  unitCost         Decimal         @db.Decimal(10, 2)
  totalCost        Decimal         @db.Decimal(10, 2) // unitCost * orderedQuantity
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relations
  stockBatches StockBatch[] // Batches created from receiving this item

  @@index([purchaseId])
  @@index([productId])
  @@index([variantId])
}

model PurchasePayment {
  id            String        @id @default(cuid())
  purchaseId    String
  purchase      Purchase      @relation(fields: [purchaseId], references: [id])
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  paymentDate   DateTime      @default(now())
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  reference     String?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([purchaseId])
  @@index([paymentDate])
}

// --- Inventory & Stock Models ---

model StockBatch {
  id              String          @id @default(cuid())
  productId       String
  product         Product         @relation(fields: [productId], references: [id])
  variantId       String?
  variant         ProductVariant? @relation(fields: [variantId], references: [id])
  batchNumber     String?
  purchaseItemId  String?
  purchaseItem    PurchaseItem?   @relation(fields: [purchaseItemId], references: [id])
  initialQuantity Int
  currentQuantity Int
  purchasePrice   Decimal         @db.Decimal(10, 2)
  expiryDate      DateTime?
  receivedDate    DateTime        @default(now())
  location        String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  saleItems   SaleItem[] // Track which sales depleted this batch
  adjustments StockAdjustment[] // Adjustments specifically affecting this batch

  @@index([productId, variantId])
  @@index([expiryDate])
  @@index([receivedDate])
  @@index([currentQuantity])
}

model StockAdjustment {
  id             String                @id @default(cuid())
  productId      String // Link to the main product for reporting
  product        Product               @relation(fields: [productId], references: [id])
  variantId      String? // Link to variant if adjustment is variant-specific
  variant        ProductVariant?       @relation(fields: [variantId], references: [id]) // Relation to Variant
  stockBatchId   String? // Optional: Which batch is being adjusted?
  stockBatch     StockBatch?           @relation(fields: [stockBatchId], references: [id]) // Relation to Batch
  userId         String
  user           User                  @relation(fields: [userId], references: [id])
  quantity       Int // Positive for increase, negative for decrease
  reason         StockAdjustmentReason
  notes          String?
  adjustmentDate DateTime              @default(now())
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  @@index([productId, variantId])
  @@index([stockBatchId])
  @@index([adjustmentDate])
}

enum StockAdjustmentReason {
  INITIAL_STOCK
  RECEIVED_PURCHASE // Usually handled via PurchaseItem -> StockBatch creation
  DAMAGED
  EXPIRED
  LOST
  STOLEN
  FOUND
  RETURN_TO_SUPPLIER
  CUSTOMER_RETURN // May create a 'return' batch or adjust existing
  INVENTORY_COUNT
  OTHER
}

// --- Customer Loyalty ---

model LoyaltyTransaction {
  id              String        @id @default(cuid())
  customerId      String
  customer        Customer      @relation(fields: [customerId], references: [id])
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  pointsChange    Int
  reason          LoyaltyReason
  relatedSaleId   String?       @unique // <<< ADDED @unique: Ensures one Sale maps to one primary LoyaltyTransaction
  relatedSale     Sale?         @relation(fields: [relatedSaleId], references: [id], onDelete: SetNull)
  notes           String?
  transactionDate DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([customerId])
  @@index([transactionDate])
}

enum LoyaltyReason {
  SALE_EARNED
  REDEMPTION
  MANUAL_ADJUSTMENT
  PROMOTION
  SIGN_UP_BONUS
  RETURN_ADJUSTMENT
  OTHER
}

// --- Utility & Other Models ---

model Attachment {
  id          String   @id @default(cuid())
  fileName    String
  fileUrl     String
  fileType    String?
  fileSize    Int?
  description String?
  uploadedAt  DateTime @default(now())

  saleId     String?
  sale       Sale?     @relation(fields: [saleId], references: [id], onDelete: SetNull)
  purchaseId String?
  purchase   Purchase? @relation(fields: [purchaseId], references: [id], onDelete: SetNull)

  @@index([saleId])
  @@index([purchaseId])
}

model CashDrawer {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  openingAmount  Decimal      @db.Decimal(10, 2)
  closingAmount  Decimal?     @db.Decimal(10, 2)
  expectedAmount Decimal?     @db.Decimal(10, 2)
  discrepancy    Decimal?     @db.Decimal(10, 2)
  notes          String?
  openedAt       DateTime     @default(now())
  closedAt       DateTime?
  status         DrawerStatus @default(OPEN)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  sales Sale[]

  @@index([openedAt])
  @@index([closedAt])
  @@index([userId])
}

enum DrawerStatus {
  OPEN
  CLOSED
  BALANCED
  DISCREPANCY
}

enum AuditLogAction {
  CREATE
  READ
  UPDATE
  DELETE
}

enum AuditType {
  USER
  PRODUCT
  SALE 
  PURCHASE
  BATCH 
  STOCK_ADJUSTMENT
  CASH_DRAWER
}

model AuditLog {
  id            String   @id @default(cuid())
  tenantId      String?
  userId        String?
  user          Member?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action        AuditLogAction
  type          AuditType
  entityId      String?
  description   String
  metadata      Json?    // Additional info about the action
  ipAddress     String?
  userAgent     String?
  performedAt   DateTime @default(now())

  @@index([tenantId])
  @@index([userId])
  @@index([type, entityId])
  @@index([performedAt])
  @@map("audit_log")
}


// --- Shared Enums ---

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  BANK_TRANSFER
  CHEQUE
  STORE_CREDIT
  GIFT_CARD
  LOYALTY_POINTS
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
  PARTIALLY_REFUNDED
  FAILED
  CANCELLED
}

enum PurchaseStatus {
  DRAFT
  ORDERED
  PARTIALLY_RECEIVED
  RECEIVED
  BILLED
  PARTIALLY_PAID
  PAID
  COMPLETED // Received and Paid
  CANCELLED
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime
  auditLogs      AuditLog[]

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}
